prompt
"Écris une fonction Python pour calculer la suite de Fibonacci jusqu'au n-ième nombre."
"Crée une classe Python pour un compte bancaire simple avec des méthodes de dépôt et de retrait."
"Implémente une fonction Python pour trier une liste d'entiers en utilisant l'algorithme de tri à bulles."
"Écris un script Python pour lire un fichier CSV, effectuer des calculs sur les données et écrire les résultats dans un nouveau fichier CSV."
"Implémente l'algorithme de recherche binaire en Python pour trouver un élément dans une liste triée."
"Conçois une hiérarchie de classes en Python pour représenter différentes formes géométriques (cercle, rectangle, triangle) avec une méthode pour calculer l'aire."
"Crée un ensemble de tests unitaires en Python pour une fonction de validation d'adresse e-mail en utilisant le module unittest."
"Écris une fonction Python qui lève une exception personnalisée et montre comment la gérer avec un bloc try-except."
"Écris une fonction Python pour extraire toutes les valeurs associées à une clé spécifique dans un fichier JSON profondément imbriqué."
"Crée un script Python qui fusionne deux DataFrames pandas sur plusieurs colonnes clés, en gérant les valeurs manquantes avec des valeurs par défaut."
"Écris une fonction Python qui convertit une liste d'objets imbriqués en un DataFrame plat, où chaque niveau d'imbrication devient une colonne distincte."

"Écris une fonction Python qui convertit une liste d'objets imbriqués en un DataFrame plat, où chaque niveau d'imbrication devient une colonne distincte."
"Implémente un script Python pour nettoyer une colonne textuelle dans un DataFrame : supprime les caractères spéciaux, met tout en minuscules et élimine les doublons."
"Écris un script Python pour calculer des statistiques agrégées (moyenne, médiane, écart-type) sur des groupes définis par plusieurs colonnes dans un DataFrame."
"Implémente un script Python pour nettoyer une colonne textuelle dans un DataFrame : supprime les caractères spéciaux, met tout en minuscules et élimine les doublons."
"Écris un script Python pour calculer des statistiques agrégées (moyenne, médiane, écart-type) sur des groupes définis par plusieurs colonnes dans un DataFrame."
"Crée une fonction Python pour interpoler les valeurs manquantes dans une série temporelle, puis détecte les anomalies en utilisant l'écart interquartile."
"Écris un script Python pour effectuer une jointure externe gauche entre deux grands ensembles de données, en optimisant la mémoire avec dask ou pyspark."
"Crée une fonction Python qui applique des transformations spécifiques (logarithme, normalisation, etc.) à plusieurs colonnes numériques dans un DataFrame pandas."
"Écris un script Python pour extraire des adresses e-mail et numéros de téléphone à partir d'une colonne contenant des textes non structurés dans un DataFrame."
"Implémente un script Python qui regroupe les données par catégorie, calcule des moyennes pondérées et génère un graphique combiné (barres + courbe) avec matplotlib ou seaborn."

"Implémente un système de gestion de bibliothèque en Python avec des classes pour Livre, Membre, et Bibliothèque. Inclus des méthodes pour emprunter, retourner, et réserver des livres. Gère les pénalités pour les retards et implémente un système de recherche de livres."
"Crée une simulation d'écosystème en utilisant la POO. Définis des classes pour différents types d'organismes (plantes, herbivores, carnivores) avec des attributs comme l'énergie et des méthodes pour manger, se reproduire et mourir. Implémente un cycle de vie et des interactions entre les organismes."
"Conçois un moteur de jeu de rôle en Python. Crée une hiérarchie de classes pour les personnages (guerrier, mage, voleur) avec des attributs et des compétences uniques. Implémente un système de combat au tour par tour et un mécanisme de progression des personnages."
"Développe un framework de test unitaire simplifié en Python. Crée des classes pour TestCase, TestSuite, et TestRunner. Implémente des méthodes pour définir des tests, les exécuter, et générer des rapports. Inclus la gestion des exceptions et le calcul des métriques de couverture de code."
"Conçois un système de plugins extensible en Python. Crée une classe de base Plugin et un gestionnaire de plugins PluginManager. Implémente un mécanisme pour charger dynamiquement des plugins à partir de fichiers externes, les initialiser, et les exécuter. Gère les dépendances entre plugins."
"Implémente un modèle orienté objet pour la composition musicale. Crée des classes pour Note, Mesure, Phrase, et Composition. Inclus des méthodes pour transposer, inverser, et jouer les compositions. Ajoute un système de sérialisation pour sauvegarder et charger les compositions."
"Développe un moteur de workflow en Python. Crée des classes pour Task, Transition, et Workflow. Implémente un système d'états et de transitions conditionnelles. Ajoute la possibilité de définir des hooks personnalisés et de générer des rapports sur l'exécution du workflow."
"Conçois un système de gestion de versions pour des objets en Python. Crée une classe VersionedObject qui garde une trace des modifications. Implémente des méthodes pour créer des snapshots, revenir à des versions précédentes, et fusionner des branches de modifications."
"Implémente un simulateur de réseau neuronal simple en utilisant la POO. Crée des classes pour Neurone, Couche, et Réseau. Inclus des méthodes pour la propagation avant, la rétropropagation, et l'apprentissage. Ajoute la possibilité de sauvegarder et charger l'état du réseau."
"Développe un système de rendu graphique vectoriel en Python. Crée une hiérarchie de classes pour différentes formes (cercle, rectangle, polygone) et des classes pour les transformations (translation, rotation, mise à l'échelle). Implémente un moteur de rendu qui convertit ces objets en image bitmap."

"Implémente un modèle de données utilisant l'héritage de tables avec SQLAlchemy. Crée une classe de base 'Véhicule' et des sous-classes 'Voiture', 'Moto', et 'Camion'. Utilise la stratégie d'héritage 'joined' et assure-toi que chaque sous-classe a des attributs spécifiques."
"Crée un modèle pour un système de gestion de cours universitaires avec SQLAlchemy. Implémente une relation many-to-many entre 'Étudiant' et 'Cours' avec une table d'association 'Inscription' qui contient des informations supplémentaires comme la date d'inscription et la note."
"Écris une requête SQLAlchemy qui récupère les 10 produits les plus vendus par catégorie, incluant le nombre total de ventes et le revenu généré. Utilise des jointures entre les tables 'Produit', 'Catégorie', et 'Vente', et applique des fonctions d'agrégation."
"Configure un système de migration de base de données avec Alembic pour un projet SQLAlchemy existant. Crée une migration qui ajoute une nouvelle table, modifie une table existante, et ajoute une contrainte de clé étrangère. Inclus des opérations de mise à niveau et de retour en arrière."
"Optimise les performances d'une application utilisant SQLAlchemy en implémentant le chargement différé (lazy loading) pour certaines relations et le chargement eager pour d'autres. Explique comment utiliser joinedload(), subqueryload(), et selectinload() pour différents scénarios."
"Crée une fonction SQL personnalisée dans PostgreSQL pour calculer la distance entre deux points géographiques, puis intègre cette fonction dans un modèle SQLAlchemy. Utilise cette fonction dans une requête pour trouver les 5 magasins les plus proches d'un point donné."
"Implémente un système de réservation de billets d'avion avec SQLAlchemy. Gère une transaction qui réserve plusieurs sièges pour un vol, met à jour le statut du vol, et crée une facture, tout en s'assurant que l'opération est atomique et gère correctement les erreurs et les rollbacks."
"Crée un modèle SQLAlchemy pour un système de gestion d'inventaire qui utilise des expressions hybrides pour calculer dynamiquement la valeur totale du stock. Implémente une propriété hybride qui peut être utilisée à la fois au niveau de l'objet Python et dans les requêtes SQL."
"Conçois un système de sharding horizontal pour une application à forte charge utilisant SQLAlchemy. Implémente une stratégie de routage des requêtes vers différentes bases de données en fonction d'une clé de sharding, et assure la cohérence des données entre les shards."
"Développe un système d'audit complet pour une application utilisant SQLAlchemy. Implémente un mécanisme qui enregistre automatiquement toutes les modifications (insertions, mises à jour, suppressions) dans une table d'historique, en capturant l'utilisateur qui a effectué la modification, la date, et les anciennes/nouvelles valeurs."
